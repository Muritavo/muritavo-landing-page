import { flatten } from "@onepercentio/one-ui/dist/utils/flatten";
import { Values } from "features/Values/Values.types";

const valuesTranslations: {
    [V in Values]: {
        title: string,
        shortDesc: string
        fullDesc: string
    }
} = {
    quality: {
        title: "Quality first",
        shortDesc: "Sempre que a tarefa foge do trivial, <b>o teste vem primeiro</b>.",
        fullDesc: `Aqui o conceito de <quote>trivial</quote> √© vari√°vel de acordo com a experi√™ncia de cada dev. 
Tenhamos como exemplo, uma integra√ß√£o com uma API.
- O trivial no meu caso, s√£o os tratamentos de loading e erro. <b>N√£o h√° raz√£o</b> para testar um padr√£o que funciona em outros fluxos e muitas vezes j√° se est√° generalizado.
- O mais complexo seria o resultado da resposta da API e seu efeito na UI. Na maioria dos casos, √© ideal que se teste os poss√≠vel cen√°rios que essa API pode assumir.

Por isso que quanto mais complexa a tarefa (na vis√£o do Dev) mais relevante √© o teste antes do desenvolvimento. O ideal √© enumerar todos os poss√≠veis cen√°rios no arquivo de teste antes da implementa√ß√£o.
O resultado desse <quote>exerc√≠cio</quote> √© uma vis√£o geral das necessidades do algoritmos final.`
    },
    seamless: {
        title: "Experi√™ncia <i>Seamless</i>",
        shortDesc: "Os elementos que compooem a UI devem ter algum tipo de transi√ß√£o",
        fullDesc: `Aqui o conceito de <quote>Seamless</quote> √© utilizado no sentido de se ter uma UI reativa, ou seja, em que os elementos tenham um ciclo de vida visualmente percept√≠vel.
Alguns requisitos de uma UI reativa:
- A transi√ß√£o entre elementos devem conter uma anima√ß√£o de sa√≠da para o elemento que se remove, e uma para entrada do elemento que se agrega
- Na medida do poss√≠vel, um elemento que muda de estado, deve o fazer transicionando propriedades pr√≥prias (por exemplo, cor de texto)
- Uma UI n√£o deve mutar de forma repentina, por exemplo, quando se traz um dado de API. Caso seja necess√°ria uma muta√ß√£o, ele deve ser progressiva`
    },
    simplicity: {
        title: "Direto ao ponto",
        shortDesc: "O usu√°rio n√£o deve receber conte√∫do inesperado",
        fullDesc: `J√° perdi a conta de quantas vezes cliquei em um elemento inesperado dentro de aplica√ß√µes por conta de muta√ß√µes de UI, popups, e mudan√ßas de estado inesperadas.
Como usu√°rio, isso se torna frustrante e reduz a satisfa√ß√£o na utiliza√ß√£o da aplica√ß√£o.
Como desenvolvedores, algumas estrat√©gias nos ajudam a limitar essas experi√™ncias
- Utiliza√ß√£o de elementos que utilizem o espa√ßo livre da UI
- Ado√ß√£o de elementos flutuantes n√£o interativos para previnir uma intera√ß√£o acidental`
    },
    adaptive: {
        title: "Responsividade",
        shortDesc: "Mais do que trabalhar com media queries, a estrutura do layout deve ser adapt√°vel",
        fullDesc: `Atualmente priorizo trabalhar com estrat√©gias que utilizem o m√≠nimo de CSS poss√≠vel. Dessa forma se ex√≠me a necessidade de layouts excessivos para diversas dimens√µes de tela
        
Apesar do CSS nos oferecer <i>Media queries</i> o abuso das mesmas pode acabar tornando complexa a manuten√ß√£o.
Existem estrat√©gias que nos ajudam nessa tarefa de um layout adapt√°vel para todos os dispositivos sem muito esfor√ßo:

Por exemplo:
- A combina√ß√£o de max-width + width: 100% para permitir que um elemento tenho um tamanho mas se adapte a larguras menores
- Flex wrap para estruturas que utilizam flex row, mas necessitam adaptar-se a dispositivos menores
- Combina√ß√£o de <i>Media queries</i> para troca de position quando um elemento deve "flutuar" dentro de um device menor`
    },
    dx: {
        title: "<i>Developer experience</i>",
        shortDesc: "Um pouco al√©m do desenvolvimento de aplica√ß√µes, o desenvolvimento baseado em nodejs nos ajuda com automatiza√ß√£o de tarefas",
        fullDesc: `Sempre que uma tarefa √© repetida mais de 1 vez, √© muito prov√°vel que ela ir√° se repetir diversas vezes ao longo do tempo.
Logo, as vezes com um pouco de esfor√ßo sobre a constru√ß√£o de scripts, essas tarefas podem ser automatizadas, reduzindo muito o esfor√ßo futuro.`
    },
}

export default flatten({
    values: {
        heading: "Valores",
        ...valuesTranslations
    },
    contact: {
        errors: {
            email: "Esse email parece n√£o estar correto"
        },
        jobs: {
            heading: "Entre em contato comigo",
            title: "Vamos construir algo juntos?",
            description: "Manda seu desafio:",
            action: {
                status: {
                    loading: "Me notificando <TextLoad></TextLoad>",
                    error: "Ops, quer tentar denovo?",
                    success: "Fui avisado, agora s√≥ aguardar :)",
                    default: "Enviar desafio"
                }
            },
            placeholder: {
                name: "Nome",
                email: "Email",
                message: "Qual o seu desafio, e como eu posso ajudar?"
            }
        },
        help: {
            title: "Tem alguma d√∫vida sobre dev?",
            description: "Vamos resolver juntos?",
            action: {
                revelalForm: "Bora ü§õüèª",
                status: {
                    default: "Mandar sua d√∫vida"
                }
            },
            placeholder: {
                name: "Nome",
                email: "Email",
                message: "Qual a sua d√∫vida?"
            }
        },

    }
})